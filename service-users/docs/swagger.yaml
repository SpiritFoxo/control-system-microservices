basePath: /api/v1
definitions:
  services.EditUserInput:
    properties:
      name:
        type: string
      roles:
        items:
          type: string
        type: array
    type: object
  services.RegisterUserInput:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      roles:
        items:
          type: string
        type: array
    type: object
  services.UserListResult:
    properties:
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
      users:
        items:
          $ref: '#/definitions/services.UserResponse'
        type: array
    type: object
  services.UserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      roles:
        items:
          type: string
        type: array
    type: object
host: localhost:8082
info:
  contact: {}
  description: API для управления пользователями в системе
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Users Service API
  version: "1.0"
paths:
  /admin/users:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of users
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of records per page
        in: query
        name: limit
        type: integer
      - description: Email filter
        in: query
        name: email
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            $ref: '#/definitions/services.UserListResult'
      security:
      - BearerAuth: []
      summary: Get users list
      tags:
      - Users
  /admin/users/{userId}:
    get:
      consumes:
      - application/json
      description: Gets user by ID
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User data
          schema:
            $ref: '#/definitions/services.UserResponse'
      security:
      - BearerAuth: []
      summary: Gets user by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Updates user information by provided ID
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      - description: Обновлённые данные пользователя
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/services.EditUserInput'
      produces:
      - application/json
      responses:
        "200":
          description: Обновлённый пользователь
          schema:
            $ref: '#/definitions/services.UserResponse'
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - Users
  /admin/users/register:
    post:
      consumes:
      - application/json
      description: Creates a new user
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/services.RegisterUserInput'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created user
          schema:
            $ref: '#/definitions/services.UserResponse'
      security:
      - BearerAuth: []
      summary: Creates a new user
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
