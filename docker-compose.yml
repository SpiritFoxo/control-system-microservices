services:

  api-gateway:
    build: ./api-gateway/
    container_name: api-gateway
    restart: always
    ports:
      - "${GATEWAY_PORT}:${GATEWAY_PORT}"
    environment:
      - GATEWAY_PORT=${GATEWAY_PORT}
      - USERS_SERVICE_URL=${USERS_SERVICE_URL}
      - ORDERS_SERVICE_URL=${ORDERS_SERVICE_URL}
      - TOKEN_SECRET=${TOKEN_SECRET}
    networks:
      - control-system-network

  service-orders:
    build: ./service-orders/
    container_name: service-orders
    restart: always
    ports:
      - "${ORDERS_PORT}:${ORDERS_PORT}"
    depends_on:
      - postgres
    environment:
      - ORDERS_PORT=${ORDERS_PORT}
      - DB_HOST=${DB_HOST}
      - DB_NAME=${DB_NAME_ORDERS}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - DB_SSLMODE=${DB_SSLMODE}
    networks:
      - control-system-network
    

  service-users:
    build: ./service-users/
    container_name: service-users
    restart: always
    ports:
      - "${USERS_PORT}:${USERS_PORT}"
    depends_on:
      - postgres
    environment:
      - USERS_PORT=${USERS_PORT}
      - DB_HOST=${DB_HOST}
      - DB_NAME=${DB_NAME_USERS}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - DB_SSLMODE=${DB_SSLMODE}
      - TOKEN_SECRET=${TOKEN_SECRET}
      - REFRESH_TOKEN_SECRET=${REFRESH_TOKEN_SECRET}
      - TOKEN_MINUTE_LIFESPAN=${TOKEN_MINUTE_LIFESPAN}
      - REFRESH_TOKEN_HOUR_LIFESPAN=${REFRESH_TOKEN_HOUR_LIFESPAN}
      - SUPERADMIN_PASSWORD=${SUPERADMIN_PASSWORD}
    networks:
      - control-system-network

  postgres:
    image: postgres:17.4-alpine3.21
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./initdb:/docker-entrypoint-initdb.d
    networks:
      - control-system-network

volumes:
  postgres_data:

networks:
  control-system-network:
    driver: bridge